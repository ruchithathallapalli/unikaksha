#Robot Pathway

import math
pos=[0,0]
while True:
    s=input()
    if s=="STOP":
        break
    movement=s.split(" ")
    direction=movement[0]
    steps=int(movement[1])
    if direction=="UP":
        pos[0]+=steps
    elif direction=="DOWN":
        pos[0]-=steps
    elif direction=="LEFT":
        pos[1]-=steps
    elif direction=="RIGHT":
        pos[1]+=steps
    else:
        pass
print(int(round(math.sqrt(pos[1]**2+pos[0]**2))))


#Heart Pattern I

n=int(input())
for i in range(n//2,n,2):
    for j in range(1,n-i,2):
        print(" ",end="")
    for j in range(1,i+1):
        print("*",end="")
    for j in range(1,n-i+1):
        print(" ",end="")
    for j in range(1,i+1):
        print("*",end="")
    print()
for i in reversed(range(0,n)):
    print(" "*(n-i-1)+"*"*(2*i+1))
    
    
#Password Verification

password=input().split(",")
for_upper=[i for i in range(65,91)]
for_lower=[i for i in range(97,123)]
alpha_upper=[]
alpha_lower=[]
symbols=['@','#','$']
check=''
count=0
result=[]
for i in for_upper:alpha_upper+=chr(i)
for i in for_lower:alpha_lower+=chr(i)

for i in password:
    if len(i) in range(6,13):
        check=i
        check_upper = [x.isupper() for x in check if x.isalpha() == True]
        check_lower = [x.islower() for x in check if x.islower() == True]
        check_digits = [x.isdigit() for x in check]
        check_symbols = [bool(x) for x in check if x in symbols]
        if any(check_symbols)==True and any(check_lower)==True and any(check_upper)==True and any(check_digits)==True:
            count+=1
            result.append(check)

if count>=1:
    for i in range(len(result)):
        if i==len(result)-1:
            print(result[i])
            break
        print(result[i],end=",")
else:
    print("No password matches the condition")


#Spiral Pattern

def pattern(value):
    row=2*value-1
    col=2*value-1
    arr=[[0 for i in range(row)]
            for j in range(col)]
    for k in range(value):
        j=k
        while j<col-k:
            arr[k][j]=value-k
            j+=1
        i=k+1
        while(i<row-k):
            arr[i][row-1-k]=value-k
            i+=1
        j=col-k-2
        while j>=k:
            arr[col-k-1][j]=value-k
            j-=1
        i=row-k-2
        while i>k:
            arr[i][k]=value-k
            i-=1
    for i in range(row):
        for j in range(col):
            print(arr[i][j],end="")
        print()
n=int(input())
pattern(n)


#Cryptography

import math
n=int(input())
alpha_ascii=[x for x in range(97,123)]
alpha_char=[]
user_list=[]
for i in range(n):
    ele=input()
    user_list.append(ele)
for i in alpha_ascii:
    alpha_char.append(chr(i))
#for mid
for i in user_list:
    first=""
    last=""
    mid_char=""
    temp=i
    if len(temp)%2!=0:
        mid=len(temp)/2
        mid=math.ceil(mid)
        mid-=1
    else:
        mid=int(len(temp)/2)
    mid_char=temp[mid]
    for i in range(mid):
        first+=temp[i]
    for i in range(mid+1,len(temp)):
        last+=temp[i]
    #for left
    f_len=len(first)
    l_len=len(last)
    f=""
    for i in range(len(first)):
        index=first[i]
        ele=alpha_char.index(index)
        f+=alpha_char[ele-f_len]
        f_len-=1
    #for right
    rev_last=last[::-1]
    last_rev=""
    l=""
    for i in range(len(rev_last)):
        index=rev_last[i]
        ele=alpha_char.index(index)
        l+=alpha_char[ele-l_len]
        l_len-=1
    print(f+mid_char+l[::-1])
